#!/bin/bash

# Check if the 'validation.sh' script exists and is available for use
# Display error message if the file is not found
# Exit the script if the file is not found 
if [[ ! -f ./validation.sh ]]; then
    echo "Error: 'validation.sh' not found!"
    exit 1
fi

# Import common functions from the 'validation.sh' script
source ./validation.sh

# Welcome message
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "  Ready to manage your databases? Let's go! "
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

# Main Menu
while true; do
    echo
    echo "Select an option:"
    select var in CreateDB ListDB SelectDB DropDB Exit; do
        if [[ -n "$var" ]]; then
            break  
        fi
        echo "Invalid option. Please select a valid choice."
    done

    # Handle different options in the main menu
    case $var in
    "CreateDB")
        # Option to create a new database
        while true; do
            read -p "Please Enter Database name: " DBName

            # Validate the database name
            if validate_name "$DBName"; then
                break
            else
                echo "Please try again."
            fi
        done

        # Check write and execute permissions
        if ! check_permissions; then
            echo "You do not have the necessary permissions to create a database here."
            continue  
        fi

        # Check if there is enough disk space
        if ! check_disk_space; then
            echo "Not enough disk space to create the database."
            continue
        fi

        # Verify if the database already exists
        if [[ -d "$DBName" ]]; then
            echo "Error: Database '$DBName' already exists. Please choose a different name."
        else
            # Create the database directory
            if mkdir "$DBName"; then
                echo "Database '$DBName' created successfully."
            else
                echo "Error: Failed to create database."
            fi
        fi
    ;;

    "ListDB")
        # Option to list all existing databases
        num_dirs=$(find . -maxdepth 1 -type d | wc -l)
        if [[ $num_dirs -le 1 ]]; then
            echo "No databases found."
        else
            echo "Number of Databases: $((num_dirs - 1))"
            echo "List of Databases:"
            find . -maxdepth 1 -type d -not -name "." | sed 's|^\./||'
        fi
    ;;

    "SelectDB")
        # Option to connect to a specific database
        while true; do
            read -p "Please Enter Database name: " DBName

            # Validate the database name
            if validate_name "$DBName"; then
                break
            else
                echo "Please try again."
            fi
        done

        # Verify if the specified database exists and has execute permissions
        if ! check_directory_access "$DBName"; then
            echo "You do not have access to the database '$DBName'."
            continue
        fi

        # Change directory to the selected database
        if cd "$DBName"; then
            echo "Connected to database '$DBName'."

            # Check if CRUD_TB exists and is executable
            if ! check_file_executable "./CRUD_TB"; then
                echo "CRUD_TB script is not executable or does not exist."
                cd ..  
                continue
            fi

            # Execute the CRUD_TB script
            bash ./CRUD_TB
            cd .. || echo "Error: Failed to return to the main directory."
        else
            echo "Error: Failed to access database directory."
        fi
    ;;

    "DropDB")
        # Option to delete an existing database
        while true; do
            read -p "Please Enter Database name: " DBName

            # Validate the database name
            if validate_name "$DBName"; then
                break
            else
                echo "Please try again."
            fi
        done

        # Verify if the specified database exists
        if [[ -d "$DBName" ]]; then
            # Confirm deletion from the user
            read -p "Are you sure you want to delete the database '$DBName'? (y/n): " confirm
            if [[ "$confirm" == "y" ]]; then
                # Verify if the database is empty
                if validate_database_empty "$DBName"; then
                    # Check write and execute permissions before deleting
                    if check_permissions; then
                        # Check sudo privileges before deleting
                        if check_sudo_privileges; then
                            # Delete the database directory
                            if rm -rf "$DBName"; then
                                echo "Database '$DBName' deleted successfully."
                            else
                                echo "Error: Failed to delete database."
                            fi
                        else
                            echo "You do not have sudo privileges to delete the database."
                        fi
                    else
                        echo "You do not have the necessary permissions to delete the database."
                    fi
                else
                    echo "Database '$DBName' is not empty. Please delete its contents first."
                fi
            else
                echo "Deletion canceled."
            fi
        else
            echo "Error: Database '$DBName' does not exist."
        fi
    ;;

    "Exit")
        # Exit the program
        echo "Thanks for using the system. See you next time!"
        break  
    ;;

    *)
        # Handle invalid menu options
        echo "Invalid option. Please try again."  
    ;;
    esac
done