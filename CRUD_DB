#!/bin/bash

# Check if the 'validation.sh' script exists and is available for use
# Display error message if the file is not found
# Exit the script if the file is not found 
if [[ ! -f ./Validation.sh ]]; then
    echo "Error: 'validation.sh' not found!"
    exit 1
fi

# Import common functions from the 'validation.sh' script
source ./Validation.sh

# Welcome message
echo "~~~~~~~~~~~~~~~~"
echo "  Ready to manage your databases? Let's go! "
echo "~~~~~~~~~~~~~~~~"

# Main Menu
while true; do
    echo
    echo "Select an option:"
    options=("CreateDB" "ListDB" "SelectDB" "DropDB" "Exit")
    select var in "${options[@]}"; do
        if [[ -n "$var" ]]; then
            break  # A valid option was selected
        elif [[ -z "$REPLY" ]]; then
            echo "No input detected. Please select a valid option."
        else
            echo "Invalid choice: '$REPLY'. Please select a valid option."
        fi
    done
    # Handle different options in the main menu
    case $var in
    "CreateDB")
        # Option to create a new database
        while true; do
            read -p "Please Enter Database name: " DBName

            # Validate the database name
            if validate_name "$DBName"; then
                break
            else
                echo "Please try again."
            fi
        done

        # Check write and execute permissions
        if ! check_permissions; then
            echo "You do not have the necessary permissions to create a database here."
            continue  
        fi

        # Check if there is enough disk space
        if ! check_disk_space; then
            echo "Not enough disk space to create the database."
            continue
        fi

        # Verify if the database already exists
        if [[ -d "$DBName" ]]; then
            echo "Error: Database '$DBName' already exists. Please choose a different name."
        else
            # Create the database directory
            if mkdir "$DBName"; then
                echo "Database '$DBName' created successfully."
            else
                echo "Error: Failed to create database."
            fi
        fi
    ;;

    "ListDB")
        # Option to list all existing databases
        num_dirs=$(find . -maxdepth 1 -type d -not -name ".*" | wc -l)
        if [[ $num_dirs -eq 0 ]]; then
            echo "No databases found."
        else
            echo "Number of Databases: $num_dirs"
            echo "List of Databases:"
            find . -maxdepth 1 -type d -not -name ".*" -exec basename {} \;
        fi
    ;;

    "SelectDB")
    while true; do
        read -p "Please Enter Database name: " DBName

        # Validate the database name
        if validate_name "$DBName"; then
            break
        else
            echo "Invalid database name. Please try again."
        fi
    done

    # Verify if the specified database exists and has execute permissions
    if ! check_directory_access "$DBName"; then
        echo "You do not have access to the database '$DBName'."
        continue
    fi

    # Change directory to the selected database
    if cd "$DBName"; then
        echo "Connected to database '$DBName'."

        # Check if CRUD_TB exists in the parent directory
        parent_dir=$(dirname "$PWD")
        crud_tb_path="$parent_dir/CRUD_TB"

        echo "Checking file: $crud_tb_path"

        # Verify the existence and executability of CRUD_TB
        if [[ ! -f "$crud_tb_path" ]]; then
            echo "Error: File 'CRUD_TB' does not exist in $parent_dir."
            cd ..
            continue
        elif [[ ! -r "$crud_tb_path" ]]; then
            echo "Error: 'CRUD_TB' script exists but is not readable."
            chmod +r "$crud_tb_path"  # Attempt to fix permissions automatically
            if [[ ! -r "$crud_tb_path" ]]; then
                echo "Error: Failed to make 'CRUD_TB' readable. Check permissions."
                cd ..
                continue
            fi
        fi

        # Source CRUD_TB script and stay in the same shell session
        source "$crud_tb_path"

        # After sourcing, return to the parent directory
        cd ..
    else
        echo "Error: Failed to access database directory."
    fi
    ;;


    "DropDB")
        # Option to delete an existing database
        while true; do
            read -p "Please Enter Database name: " DBName

            # Verify if the specified database exists
            if [[ -d "$DBName" ]]; then
                # Validate the database name
                if validate_name "$DBName"; then
                    break  # Exit loop if the database exists and the name is valid
                else
                    echo "Invalid database name. Please enter a valid name."
                fi
            else
                echo "Error: Database '$DBName' does not exist. Please enter a valid database name."
            fi
        done

        # Confirm deletion from the user
        read -p "Are you sure you want to delete the database '$DBName'? (y/n): " confirm
        if [[ "$confirm" == "y" ]]; then
            # Verify if the database is empty
            if validate_database_empty "$DBName"; then
                # Check write and execute permissions before deleting
                if check_permissions; then
                    # Check sudo privileges before deleting
                    if check_sudo_privileges; then
                        # Delete the database directory
                        if rm -rf "$DBName"; then
                            echo "Database '$DBName' deleted successfully."
                        else
                            echo "Error: Failed to delete database."
                        fi
                    else
                        echo "You do not have sudo privileges to delete the database."
                    fi
                else
                    echo "You do not have the necessary permissions to delete the database."
                fi
            else
                echo "Database '$DBName' is not empty. Please delete its contents first."
            fi
        else
            echo "Deletion canceled."
        fi
        ;;

    "Exit")
        # Ask for confirmation before exiting
        read -p "Are you sure you want to exit? (y/n): " confirm_exit
        if [[ "$confirm_exit" == "y" ]]; then
            echo "Thanks for using the system. See you next time!"
            break  # Exit the loop and program
        else
            echo "You chose not to exit. Returning to the menu."
        fi
        ;;


    *)
        # Handle invalid menu options
        echo "Invalid option. Please try again."  
    ;;
    esac
done