#!/bin/bash

# Check if the 'validation.sh' script exists and is available for use
# Display error message if the file is not found
# Exit the script if the file is not found
# Get the directory of the current script (CRUD_TB)
BASE_DIR=$(dirname "$(realpath "${BASH_SOURCE[0]}")")

# Check if the 'validation.sh' script exists in the same directory as CRUD_TB
if [[ ! -f "$BASE_DIR/Validation.sh" ]]; then
    echo "Error: 'Validation.sh' not found in $BASE_DIR!"
    exit 1
fi

# Source the validation.sh script from the correct path
source "$BASE_DIR/Validation.sh"


# Welcome message
echo "           ~~~~~~~~~~~~~~~~                  "
echo "      Table Management: Let's Begin!        "
echo "           ~~~~~~~~~~~~~~~~                  "

# Main menu 
while true; do
    # Display the list of available menu options for the user
    select var in CreateTable ListTables DropTable InsertIntoTable SelectFromTable DeleteFromTable UpdateTable Exit; do
        case $var in
            "CreateTable")  
                while true; do
                    read -p "Enter Table Name: " table_name
                    if ! check_exit "$table_name"; then
                        break 2  # Exit to main menu
                    fi

                    if ! validate_name "$table_name"; then
                        continue
                    fi

                    if [[ -f "$table_name" ]]; then
                        echo "Table '$table_name' already exists."
                        continue
                    fi
                    break
                done

                read -p "Please enter the number of columns: " colNum
                if ! check_exit "$colNum"; then
                    break  # Exit to main menu
                fi
                if ! [[ $colNum =~ ^[0-9]+$ ]] || [[ $colNum -le 0 ]]; then
                    echo "Invalid number of columns. Please enter a positive integer."
                    continue
                fi

                metadata_file=".$table_name-metadata"
                touch "$metadata_file"
                flag=0

                for ((i = 1; i <= colNum; i++)); do
                    read -p "Please enter the name for column $i: " colData
                    if ! check_exit "$colData"; then
                        break 3  # Exit to main menu
                    fi
                    if ! validate_name "$colData"; then
                        ((i--))
                        continue
                    fi

                    read -p "Please enter the data type for column $colData (int, string, float): " datatypeCol
                    if ! check_exit "$datatypeCol"; then
                        break 3  # Exit to main menu
                    fi
                    if [[ "$datatypeCol" != "int" && "$datatypeCol" != "string" && "$datatypeCol" != "float" ]]; then
                        echo "Invalid data type. Please enter 'int', 'string', or 'float'."
                        ((i--))
                        continue
                    fi

                    line="$colData:$datatypeCol"

                    if [[ $flag -eq 0 ]]; then
                        read -p "Do you want to make $colData the primary key? (yes/no): " pkCheck
                        if ! check_exit "$pkCheck"; then
                            break 3  # Exit to main menu
                        fi
                        if [[ "$pkCheck" =~ ^([yY][eE][sS]|[Yy])$ ]]; then
                            line+=":pk"
                            flag=1
                        fi
                    fi

                    echo "$line" >> "$metadata_file"
                done

                touch "$table_name"
                if [[ $? -eq 0 ]]; then
                    echo "Table '$table_name' created successfully with metadata."
                else
                    echo "Failed to create table."
                fi
                break
                ;;

            "DropTable")  
                while true; do
                    read -p "Enter Table Name to Drop: " table_name  
                    if ! check_exit "$table_name"; then
                        break 2  # Exit to main menu
                    fi

                    if ! validate_name "$table_name"; then
                        continue
                    fi

                    if [[ -f "$table_name" ]]; then
                        rm "$table_name"  
                        if [[ $? -eq 0 ]]; then
                            echo "Table '$table_name' deleted successfully."  
                        else
                            echo "Failed to delete table."  
                        fi
                        break
                    else
                        echo "Table '$table_name' does not exist."
                        continue
                    fi
                done
                break
                ;;

            "InsertIntoTable")  
                while true; do
                    read -p "Please enter Table Name: " TBName
                    if ! check_exit "$TBName"; then
                        break 2  # Exit to main menu
                    fi

                    if [[ -e $TBName ]]; then
                        metadata_file=".$TBName-metadata"
                        
                        if [[ ! -f $metadata_file ]]; then
                            echo "Metadata file for the table is missing. Cannot proceed."
                            break
                        fi
                        
                        columnSize=$(wc -l < "$metadata_file")
                        row=""

                        for ((i = 0; i < columnSize; i++)); do
                            metadata_line=$(sed -n "$((i + 1))p" "$metadata_file")
                            colName=$(echo "$metadata_line" | cut -d: -f1)
                            colType=$(echo "$metadata_line" | cut -d: -f2)
                            colPkCheck=$(echo "$metadata_line" | cut -d: -f3)

                            valid_input=false

                            while ! $valid_input; do
                                read -p "Please enter value for column $colName ($colType): " value
                                if ! check_exit "$value"; then
                                    break 5  # Exit all loops to main menu
                                fi

                                case $colType in
                                    int)
                                        if ! [[ $value =~ ^[0-9]+$ ]]; then
                                            echo "Error: $colName must be an integer."
                                            continue
                                        fi
                                        ;;
                                    string)
                                        if ! [[ $value =~ ^[a-zA-Z]+$ ]]; then
                                            echo "Error: $colName must be a string."
                                            continue
                                        fi
                                        ;;
                                    float)
                                        if ! [[ $value =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                                            echo "Error: $colName must be a float."
                                            continue
                                        fi
                                        ;;
                                    *)
                                        echo "Error: Unknown data type $colType for column $colName."
                                        continue
                                        ;;
                                esac

                                if [[ $colPkCheck == "pk" ]]; then
                                    if grep -q "^$value," "$TBName"; then
                                        echo "Error: Duplicate value for primary key column $colName."
                                        continue
                                    fi
                                fi

                                valid_input=true
                            done

                            if [[ $i -eq 0 ]]; then
                                row+="$value"
                            else
                                row+=",$value"
                            fi
                        done

                        echo "$row" >> "$TBName"
                        echo "Data is inserted successfully."
                        break
                    else
                        echo "Table does not exist. Please enter a valid table name."
                    fi
                done
                ;;

            "SelectFromTable")  
                read -p "Enter Table Name: " table_name  
                if ! check_exit "$table_name"; then
                    break  # Exit to main menu
                fi
                
                if [[ ! -f "$table_name" ]]; then
                    echo "Table does not exist."
                    break
                fi

                metadata_file=".$table_name-metadata"
                if [[ ! -f "$metadata_file" ]]; then
                    echo "Metadata file for the table is missing."
                    break
                fi

                echo "Available columns:"
                awk -F: '{print NR ") " $1}' "$metadata_file"

                read -p "Enter column(s) to display (comma-separated or * for all): " columns
                if ! check_exit "$columns"; then
                    break  # Exit to main menu
                fi

                read -p "Enter condition (e.g., column=value) or leave blank: " condition
                if ! check_exit "$condition"; then
                    break  # Exit to main menu
                fi

                read -p "Enter column to order by or leave blank: " order_by
                if ! check_exit "$order_by"; then
                    break  # Exit to main menu
                fi

                # ... [rest of the code] ...
                ;;

            "DeleteFromTable")  
                while true; do
                    read -p "Enter Table Name: " table_name 
                    if ! check_exit "$table_name"; then
                        break 2  # Exit to main menu
                    fi  

                    if ! validate_table_exists "$table_name"; then
                        echo "Table does not exist. Try again."
                        continue
                    fi  

                    if ! validate_writable "$table_name"; then
                        echo "You don't have permission to modify this table. Try again."
                        continue
                    fi  

                    while true; do
                        read -p "Enter data to delete (exact match), or type 'cancel' to go back: " record_data  
                        if [[ "$record_data" == "cancel" ]]; then
                            echo "Cancelling operation. Returning to the main menu."
                            break 2  # Exit to main menu
                        fi
                        if ! check_exit "$record_data"; then
                            break 3  # Exit to main menu
                        fi

                        if ! validate_not_empty "$record_data"; then
                            continue
                        fi  

                        if ! grep -q "^$record_data$" "$table_name"; then
                            echo "Error: No matching data found. Please enter valid data."
                            continue
                        fi

                        grep -v "^$record_data$" "$table_name" > temp_table
                        mv temp_table "$table_name"  
                        
                        if [[ $? -eq 0 ]]; then
                            echo "Data deleted successfully."
                            break 3  # Exit to main menu
                        else
                            echo "Failed to delete data. Please try again."
                        fi
                    done
                done
                ;;

            "UpdateTable")  
                read -p "Enter Table Name: " table_name  
                if ! check_exit "$table_name"; then
                    break  # Exit to main menu
                fi

                if ! validate_name "$table_name"; then
                    continue
                fi  

                if ! validate_table_exists "$table_name"; then
                    continue
                fi 

                if ! validate_writable "$table_name"; then
                    continue
                fi  

                echo "Do you want to update a specific column? (yes/no)"
                read -p "Enter your choice: " update_column_choice
                if ! check_exit "$update_column_choice"; then
                    break  # Exit to main menu
                fi

                if [[ "$update_column_choice" =~ ^([yY][eE][sS]|[Yy])$ ]]; then
                    metadata_file=".$table_name-metadata"
                    
                    if [[ ! -f "$metadata_file" ]]; then
                        echo "Metadata file for the table is missing."
                        continue
                    fi

                    echo "Available columns:"
                    awk -F: '{print NR ") " $1}' "$metadata_file"

                    read -p "Enter the number of the column you want to update: " column_number
                    if ! check_exit "$column_number"; then
                        break  # Exit to main menu
                    fi

                    column_name=$(awk -F: -v col_num="$column_number" 'NR == col_num {print $1}' "$metadata_file")
                    if [[ -z "$column_name" ]]; then
                        echo "Invalid column number."
                        continue
                    fi

                    while true; do
                        read -p "Enter the data to replace in column $column_name: " old_record
                        if ! check_exit "$old_record"; then
                            break 3  # Exit to main menu
                        fi
                        if ! validate_not_empty "$old_record"; then
                            continue
                        fi 

                        if ! grep -q "^$old_record$" "$table_name"; then
                            echo "Error: The data '$old_record' does not exist in the table."
                            continue
                        fi
                        break
                    done

                    while true; do
                        read -p "Enter new data for column $column_name: " new_record
                        if ! check_exit "$new_record"; then
                            break 3  # Exit to main menu
                        fi
                        if ! validate_not_empty "$new_record"; then
                            continue
                        fi 
                        
                        if [[ "$new_record" == "$old_record" ]]; then
                            echo "New data cannot be the same as the old data. Please enter a different value."
                            continue
                        fi

                        break
                    done

                    sed -i "s/^$old_record$/$new_record/" "$table_name"
                    if [[ $? -eq 0 ]]; then
                        echo "Table updated successfully."  
                    else
                        echo "Failed to update table."  
                    fi
                else
                    echo "No column selected for update. Returning to menu."
                fi
                break
                ;;

            "Exit")  
                read -p "Are you sure you want to exit? (y/n): " confirm_exit
                if [[ "$confirm_exit" == "y" ]]; then
                    echo "  Exiting Table Management. Farewell!   " 
                    return
                else
                    echo "You chose not to exit. Returning to the menu."
                fi
                ;;

            *)
                echo "Invalid option. Please try again."  
                break
                ;;
        esac
    done
done